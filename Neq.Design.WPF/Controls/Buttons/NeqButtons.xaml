<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:neq="clr-namespace:Neq.Design.WPF.Controls"
                    xmlns:converters="clr-namespace:Neq.Design.WPF.Converters">

    <converters:SourceToImageConverter x:Key="sourceToImageConverter"/>

    <Style x:Key="NeqBaseButton" TargetType="{x:Type neq:NeqButton}">

        <Style.Setters>

            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource NeqFocusVisual}"/>
            
            <Setter Property="IconMargin" Value="0"/>
            <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}"/>
            <Setter Property="Padding" Value="10 8"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type neq:NeqButton}">

                        <Border Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">

                            <StackPanel Orientation="Horizontal"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                                <ContentPresenter VerticalAlignment="Center" 
                                                  x:Name="imageContainer" 
                                                  Content="{TemplateBinding Converter={StaticResource sourceToImageConverter}, Property=Icon}"
                                                  Margin="{TemplateBinding IconMargin}"/>
                           

                                <ContentPresenter VerticalAlignment="Center" 
                                                  Content="{TemplateBinding Content}"/>

                            </StackPanel>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style.Setters>

    </Style>

    <Style x:Key="NeqAccentButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundPrimary}"/>
        <Setter Property="Background" Value="{DynamicResource Accent}"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentHover}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource AccentDisabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="NeqButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundPrimary}"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackground}"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundHover}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundDisabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="NeqDestructiveButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource DestructiveForeground}"/>
        <Setter Property="Background" Value="{DynamicResource DestructiveBackground}"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DestructiveHover}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource DestructiveBackgroundDisabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource DestructiveForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="NeqTransparentButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondary}"/>
        <Setter Property="Background" Value="Transparent"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundPrimary}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="NeqOutlineButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundSecondary}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ForegroundPrimary}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundPrimary}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource ForegroundDisabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>


    <Style x:Key="NeqChromeCloseButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondary}"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackground}"/>
        <Setter Property="CornerRadius" Value="0"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="#E92539"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="NeqChromeButton" TargetType="{x:Type neq:NeqButton}" BasedOn="{StaticResource NeqBaseButton}">

        <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondary}"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackground}"/>
        <Setter Property="CornerRadius" Value="0"/>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundPrimary}"/>
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundHover}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>